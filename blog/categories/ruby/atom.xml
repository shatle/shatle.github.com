<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | Liu.Shatle]]></title>
  <link href="http://shatle.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://shatle.github.io/"/>
  <updated>2018-04-24T23:13:47+08:00</updated>
  <id>http://shatle.github.io/</id>
  <author>
    <name><![CDATA[liu.shatle &hearts; gmail.com]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[rspec practices 1]]></title>
    <link href="http://shatle.github.io/blog/2016/04/23/rspec-practices-1/"/>
    <updated>2016-04-23T18:17:16+08:00</updated>
    <id>http://shatle.github.io/blog/2016/04/23/rspec-practices-1</id>
    <content type="html"><![CDATA[<p>U should add gem <code>rspec-rails</code> in ur project&#8217;s Gemfile, then bundle.</p>

<p>Then, u need run command <code>rails g rspec:install</code>.</p>

<p>When u use rails commands, likes <code>rails g model User xx:xx</code>. It will help u to create <code>spec/models/user_spec.rb</code> file.</p>

<p>Yes, Rspec will check <code>_spec.rb</code> file as test file.</p>

<p>Give me some codes:</p>

<pre><code class="ruby">require 'rails_helper'

RSpec.describe User, :type =&gt; :model do
  context "signup with" do
    it "email and password, then success." do
      expect(User.signup("123@exmaple.com", "123456").errors.size).to eq(0)
    end
    it "illege email and password, then fail." do
      expect(User.signup("123sdf", "123456").errors.size).to eq(1)
    end

    it "email and no password, then fail. " do
      expect( User.signup("123@example.com", "").errors.size ).to eq(1)
    end
  end
end
</code></pre>

<p>and then, u can use <code>rspec</code> to test all <code>_spec</code> files,
or u can only test <code>user_spec.rb</code> file with <code>rspec spec/models/user_spec.rb</code> command.</p>

<p>if no error, u can get</p>

<pre><code class="ruby">3 examples, 0 failures
</code></pre>

<p>It is not a good view. We just not work for testing, but say something to others.</p>

<p>U can run <code>rspec --format doc</code>,  will get result:</p>

<pre><code class="ruby">User
  signup with
    email and password, then success.
    illege email and password, then fail.
    email and no password, then fail.

3 examples, 0 failures
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby:　reference or value]]></title>
    <link href="http://shatle.github.io/blog/2013/08/19/Ruby-reference-or-value/"/>
    <updated>2013-08-19T14:18:00+08:00</updated>
    <id>http://shatle.github.io/blog/2013/08/19/Ruby-reference-or-value</id>
    <content type="html"><![CDATA[<p>可能有不少人纠结于 ruby 到底是传值呢，还是传引用呢。我也很纠结啊！！</p>

<p>Thanks: https://www.ruby-forum.com/topic/41160</p>

<p>相信，ruby 确实为我们提供了很多便利，但是对于部分想深入操作代码的人来说，可能不点不友好。</p>

<pre><code class="ruby">str = "a str"
copy = str
str = "a diff str"

p copy
p str

# =&gt; "a str"
# =&gt; "a diff str"
</code></pre>

<p>这或许是你想看到的结果，copy 不会因 str 的变化而变化，仍然保持当初由 str 得来的值。从对象的方法上说，这也是合情理的。copy 和 str 本不是同一 String 对象，当其一做出修改，根据对象的独立特性，另一个应该也不会变化，否则你也不会起不同的名称了。</p>

<p>但是有些人，会把c++中的指针套用到ruby上，因为他们想修改一个，相应修改另一个，他们才不管什么对象应该互相不影响的说法。</p>

<pre><code class="c">string str="a str";
string *cp = &amp;str;
str="a diff str"

cout &lt;&lt; *cp &lt;&lt; endl;
cout &lt;&lt; str &lt;&lt; endl;

# =&gt; "a diff str"
# =&gt; "a diff str"
</code></pre>

<p>在ruby中，如果有此想法的你，你不得不：</p>

<pre><code class="ruby">str = "a str"
copy = str
str.replace "a diff str"

p copy
p str

# =&gt; "a diff str"
# =&gt; "a diff str"
</code></pre>

<p>但是，为什么用 replace 替代 = 这一操作符之后，就起作用了呢？难道原本它们就是指向同一地址？很可能是！</p>

<p>网友有说可能是 replace 在 ruby 中的 kenel/Object 进行了特殊操作</p>

<blockquote><p>this should be inherited from kernel/Object and then overriden
so a clear interface can be followed, my personal belief.</p></blockquote>

<p>不过，我反而觉得是 ruby 对 = 操作符进行重写。</p>

<p>在上一代码中，ruby 为字符数组&#8221;a str&#8221;分配了内存，然后定义一个str相关的指针，指向这一字符数组的地址；然后在定义一个指针copy，其等同于str，指向也是字符数组的地址。</p>

<p>在最开始的例子中</p>

<pre><code class="ruby">str = "a diff str"
</code></pre>

<p>由于 str 和 copy 在前两行的定义声明中是指向同一字符数组的。此行代码，则会对新的字符数组进行比较，由于不相同，ruby 重新分配内存来存储&#8221;a diff str&#8221;，之后str重新指向这一字符数组。</p>

<p>于是，从上说法来看，<code>=</code>例子的相应c++代码可能会是：</p>

<pre><code class="c">string one_string = "a str";
string *str=&amp;one_string, *copy;
copy = str;
string other_string = "a diff str";
if (other_string != one_string){
  str = &amp;other_string;
}

cout &lt;&lt; *copy &lt;&lt; endl;
cout &lt;&lt; *str &lt;&lt; endl;

# =&gt; "a str"
# =&gt; "a diff str"
</code></pre>

<p><code>replace</code>例子的相应c++代码可能会是：</p>

<pre><code class="c">string one_string = "a str";
string *str=&amp;one_string, *copy;
copy = str;
*str="a diff str";

cout &lt;&lt; *cp &lt;&lt; endl;
cout &lt;&lt; *str &lt;&lt; endl;

# =&gt; "a diff str"
# =&gt; "a diff str"
</code></pre>

<p>因为大多数的人肯定使用 <code>=</code> 操作符，而程序语言在设计时肯定会考虑内存的消耗。同样的工作与速率，内存消耗越少，当然也就越好。所以，重写<code>=</code>的可能性也就会更大些。Ruby 走的是简便的路线，你想操作指针，但它并不允许。在它的领域里，它希望你只看到对象。当你操作对象时，你已经在操作指针了。</p>

<p>当然，以上也只是我的猜测，我没有心思认真阅读 ruby 的源码。</p>

<hr />

<p>今天看到个解释比较好的，用图的：</p>

<blockquote><p>http://stackoverflow.com/questions/1872110/is-ruby-pass-by-reference-or-by-value#answer-10974116</p></blockquote>

<p><img src="/images/photo/2013-08-22_09_19_31%E7%9A%84%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt="2013-08-22 09:19:31的屏幕截图.png" /></p>

<p><img src="/images/photo/2013-08-22_09_19_50%E7%9A%84%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt="2013-08-22 09:19:50的屏幕截图.png" /></p>

<p><img src="/images/photo/2013-08-22_09_20_12%E7%9A%84%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt="2013-08-22 09:20:12的屏幕截图.png" /></p>

<p><img src="/images/photo/2013-08-22_09_20_28%E7%9A%84%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt="2013-08-22 09:20:28的屏幕截图.png" /></p>

<p><img src="/images/photo/2013-08-22_09_20_46%E7%9A%84%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt="2013-08-22 09:20:46的屏幕截图.png" /></p>

<p>明显，此网友的理解和我的是一样的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ruby ObjectSpace]]></title>
    <link href="http://shatle.github.io/blog/2012/08/17/ruby-objectspace/"/>
    <updated>2012-08-17T21:15:00+08:00</updated>
    <id>http://shatle.github.io/blog/2012/08/17/ruby-objectspace</id>
    <content type="html"><![CDATA[<blockquote><p>Programming Ruby</p></blockquote>

<p>RUBY支持获取即时对象，此功能可以通过<code>ObjectSpace</code>来实现。</p>

<p>例如，循环列出类型是Float的所有对象。</p>

<pre><code>b = 65.3
ObjectSpace.each_object(Float){|x| p x}
</code></pre>

<p>结果</p>

<pre><code>2.718281828459045
3.141592653589793
NaN
Infinity
2.220446049250313e-16
1.7976931348623157e+308
2.2250738585072014e-308
65.3
=&gt; 8
</code></pre>

<p>前面7个是由于Float类引入了其他模块，而模块定义了一些常量，就是这些了。第8个是本人赋值的变量。</p>

<p>NaN是不合法值，如：</p>

<pre><code>a = 0.0/0.0
=&gt; NaN
</code></pre>

<p>但是，ObjectSpace获取即时对象，对Fixnum, Symbol, true, false, nil来说是不可行的。如：</p>

<pre><code>c=23
ObjectSpace.each_object(Fixnum){|x| p x}
</code></pre>

<p>结果为</p>

<pre><code>=&gt; 0
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ruby const_set]]></title>
    <link href="http://shatle.github.io/blog/2012/08/17/ruby-const-set/"/>
    <updated>2012-08-17T19:41:00+08:00</updated>
    <id>http://shatle.github.io/blog/2012/08/17/ruby-const-set</id>
    <content type="html"><![CDATA[<h2>常量</h2>

<p>Ruby会对大写字母开头的变量自动识别为常量</p>

<pre><code>module MyModule
    SERVER = "192.168.0.123"
end
</code></pre>

<p>可直接通过“模块名／类名::常量名”访问常量值</p>

<pre><code>puts MyModule::SERVER # 
</code></pre>

<p>常量可以重新赋值</p>

<pre><code>MyModule::SERVER = "192.168.0.122"
</code></pre>

<p>会有警告：warning: already initialized constant SERVER , 值会改变的。</p>

<p>不过，我比较常用的方法是const_set(地球人小心反射)</p>

<ul>
<li><p>在方法的内部</p>

<pre><code>  def set_something
      const_set("SERVER", "192.168.0.122")
  end
</code></pre></li>
<li><p>在模块或者类的外部</p>

<pre><code>  MyModule.const_set(:SERVER, "192.168.0.122")  #呵，可以用symbol
</code></pre>

<p>当然，可以转变一下思路，在方法的内部使用symbol,有必要吗？对某人来说，这个可以有</p>

<pre><code>  self.class.const_set(:SERVER,"192.168.0.122")
</code></pre></li>
</ul>

]]></content>
  </entry>
  
</feed>
