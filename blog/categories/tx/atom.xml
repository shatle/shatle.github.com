<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tx | Liu.Shatle]]></title>
  <link href="http://shatle.github.io/blog/categories/tx/atom.xml" rel="self"/>
  <link href="http://shatle.github.io/"/>
  <updated>2018-04-24T23:13:47+08:00</updated>
  <id>http://shatle.github.io/</id>
  <author>
    <name><![CDATA[liu.shatle &hearts; gmail.com]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[tx特工第一季]]></title>
    <link href="http://shatle.github.io/blog/2013/10/23/tx-te-gong-1/"/>
    <updated>2013-10-23T14:18:00+08:00</updated>
    <id>http://shatle.github.io/blog/2013/10/23/tx-te-gong-1</id>
    <content type="html"><![CDATA[<p>从腾讯招聘微信看到的：http://codestar.alloyteam.com/1/1 ，有些意思。我的过程无厘头。</p>

<h3>1/1</h3>

<p>这一关的输入名字与邮箱。想当然地，很简单了。但是，输入相关项后，居然还是不能进入。这也是特工任务－－走后门？tx提倡走后门吗，节操何在？</p>

<p>抓包？Firefox 用户的优势体现出来了，firebug或者自带控制台的也行。请求信息中，会返回错误，其中提示没有timestamps。</p>

<p>好吧，从命令行中，敲入并执行：</p>

<pre><code>$('input[name=timestamps]').value=(new Date()).valueOf()
</code></pre>

<p>OK，点击「打开」吧。</p>

<h3>1/2</h3>

<p>这个画企鹅的事，我从来没有想过。关于这自栩的事，好吧，不说了。</p>

<p>但是题目让我迷惑了很久！</p>

<p>第一个题目还简单：</p>

<pre><code>border-radius: 50%;
</code></pre>

<p>第二个我实在想了好久，真心的。一直找到 <code>border-corner-shape</code>这一属性，其中还看到http://lea.verou.me/2013/03/border-corner-shape-is-in-danger-and-you-can-help/ 。但结果还是不出来，可能是firefox不支持，或者是tx的js测试响应程序不支持？</p>

<p>没办法，只能看看页面了。幸运的是，页面的注释中有，</p>

<blockquote><p>可参考 http://www.alloyteam.com/2012/10/css3-draw-qq-logo/</p></blockquote>

<p>看了里面的方法，思想开朗了。之前的css运用中，一直没有注意啊，border 还有这一模型：</p>

<p><img src="http://octoper.com/photo/050faa5d8d3076e62f079f9c2dcd4dbb/border.png" alt="border.png" /></p>

<p>代码：</p>

<pre><code>  border-top: 20px solid transparent;
  border-bottom: 20px solid transparent;
  transform-origin: top right;
  transform: rotate(-60deg);
  -webkit-transform: rotate(-60deg);

  ...
</code></pre>

<p>http://jsfiddle.net/shatle/fgLLS/</p>

<h3>1/3</h3>

<p>这个吧，实在没心思和时间看API文档，直接收藏了牛人的代码，然后「开战」&#8230;</p>

<h3>1/4</h3>

<p><strong>第一灯</strong>，数组克隆：</p>

<pre><code>var clone = function(arr){
return arr.slice(0);
}
</code></pre>

<p><strong>二灯</strong>，字符串去前后空格trim：</p>

<p>开始想偷工减料的：</p>

<pre><code>str.ltrim().rtrim();
</code></pre>

<p>但是不行啊，后来是：</p>

<pre><code>str.replace(/^\s\s*/, '').replace(/\s\s*$/, '');
</code></pre>

<p>不过，这个应该也行</p>

<pre><code>str.replace(/^\s+|\s+$/g,'');
</code></pre>

<p><strong>三灯</strong>，NodeList to Array：</p>

<pre><code>Array.prototype.slice.call(list);
</code></pre>

<h2>1/5</h2>

<p>找出数字和为最大的路径。其实我是看感觉点的，基本的思路是：首先，从底往上，找出每行的最大数的方位；从上往下，预估两三行吧，差不多的，然后就过了。</p>
]]></content>
  </entry>
  
</feed>
