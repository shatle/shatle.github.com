<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: interveiw | Liu.Shatle]]></title>
  <link href="http://shatle.github.io/blog/categories/interveiw/atom.xml" rel="self"/>
  <link href="http://shatle.github.io/"/>
  <updated>2020-04-25T16:24:07+08:00</updated>
  <id>http://shatle.github.io/</id>
  <author>
    <name><![CDATA[liu.shatle &hearts; gmail.com]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[think of interview]]></title>
    <link href="http://shatle.github.io/blog/2018/01/24/think-of-interview/"/>
    <updated>2018-01-24T23:41:53+08:00</updated>
    <id>http://shatle.github.io/blog/2018/01/24/think-of-interview</id>
    <content type="html"><![CDATA[<p>去年，项目组事情比较多，每个人的工作量都有些大，经常加班深夜，导致整体团队都很累，所以，急需招入小伙伴。
在之前的前端人员离职之后，增加开发人员越加紧迫。下面，整理一下面试的体会。</p>

<h4>个人总结</h4>

<p>参与的是技术面试，应试人员过来时会有一份笔试。当应试人员完成试卷时，我们才下去进行真正的面试。
我作为一个辅助的技术面试人员，主要是补充提问。</p>

<p>在面试的过程中，上级领导也给出了些不少的建议，指出改进的地方。</p>

<p><strong>个人介绍</strong></p>

<p>初期，作为技术面试，上来就会对应试人员进行题面的提问。
这里有个问题，忽略了人的基本属性。招聘进来的是人，一个需要参与团队的人，而不是简单的一个技术机器。</p>

<p>个人介绍，通常可以提前准备，也可以没有准备。但无论如何，从中都可以看出应该的基本语言表达能力。或者，如果连这准备都没有，可以看出是否重要此次的面试。</p>

<p>在应试人员的自我介绍时，只需要简单的抓住关键点，了解其基本表达能力。同时，面试人员可以快速的浏览其做题的情况，在心里有个大概的提问方向。</p>

<p><strong>笔试提问</strong></p>

<p>前端的题面，包括js/css/jQuery的基础、算法、工作常遇到的问题等。</p>

<p>js基础，可以看出应试人员在开发过程中的细心程度，但通常工作之后的应试人员表现得都不是很理想，反而是实习生在答案上表现得优异。</p>

<p>做为过来人，是知道其原因的，也很容易理解。实习生有足够的时间来准备各种面试，而还在工作的应试人员就不一样，他们需要完成正常工作中的任务。</p>

<p>需要找到一个基础很好，又有工作经验的人，也不是简单地找一个年限够长的在职人员。关键在于，应试人员是否有意识去注意使用中的细节。</p>

<p>算法，应试人员基本都不怎么样，反而是实习生会好些。前端的工作，了解需求，对接后端的接口，并实现设计人员的交互，最大限度地提升用户体验。通常来说，后端返回的数据会避免过大的数据，以便于处理，致使前端的算法机能表现弱些。</p>

<p>在编程时还是需要注意细节，比如循环与零比较都是可以作为优化的点。现在编程中，习惯使用与underscode类似的lodash进行各操作，ES6也提供了较先进的方法，但最终还是希望有优化编辑的意识。</p>

<p>其中，令我好奇的是，有些人一直使用for循环，而不去寻找更为方便的underscore/lodash工具进行数据处理，这是不是也反应出一部分人对编程没有优化/简化的想法。</p>

<p>工作中遇到的问题，比如如何避免附件缓存等，都是常见的问题。如果实在没有遇到，也是考验应试人员的一个点。但如果面试过程良好，还会话面时进行相关提问。</p>

<p>笔试提问，可以看到应试人员基技术基础好不好，还可以看到其快速理解力，及对题目回答的表达能力等。工作中，这些都是基础的。</p>

<p><strong>话面</strong></p>

<p>抛开题目，进入话面。希望看到应试人员几点：</p>

<ul>
<li><p>生活方面是否适合当前团队。</p>

<p>  应试人员是哪里人，现居住在哪里。作为一个开发人员，工作中可能会有些意料不到事情，是否可以快速反应并到场解决问题。</p>

<p>  工作肯定会有各方面的压力，通常是怎么释放的。工作之余有什么爱好，比如运动、聚会什么的，也是值得参考的。即使碰到对编程极度热爱的人员，通常也会喜欢听歌、看电影。</p>

<p>  是否结婚，有无男女朋友，对象的工作地点，这些也会对是否成功入职有一定的影响，所以也是需要考虑的。</p></li>
<li><p>技术知识点是否是团队需要的。</p>

<p>  技术知识点太多，首先会在简历上做了一层过滤，这可以过滤大部分的不是团队需要的人员。</p>

<p>  另外，出于开放的原则，会对部分未完全匹配的简介给予面试的机会，希望能够找出优秀的人员。</p>

<p>  比如，工作中只使用过 AngularJS 或 VueJS，而现有的工作需求是 React，那么也会给予机会面试。毕竟，很多框架类的东西是相通的。但，没有 React 项目经验的人员，需要注意提问其掌握框架的大致时间，了解其学习、快速上手的能力。</p>

<p>  如果掌握需求匹配的技术，还需要深入的了解技术细节，实践过程中遇到的问题和解决方法。</p></li>
<li><p>理解问题能力</p>

<p>  理解问题，可以从笔试部分了解到。遇到些应试人员，在做笔试部分时就没有读懂题目。这原因可能是一时的疏忽，但本人觉得更多的是没有相应的知识概念，这点并不可耻，毕竟每个人的知识范围都是有限的。</p>

<p>  在话面过程中，我们也会提到一些技术或者其它的问题。通常，这些问题都是根据应试人员的经历来进行提问的，也有些关联性可能较远的问题，试图去了解到应试人员对熟悉领域中的问题是否有快速的反应能力，对不熟悉领域是否有解决和求知的欲望。</p></li>
<li><p>正常沟通能力</p>

<p>  沟通能力，这是必须的，也是很重要的。</p></li>
</ul>

]]></content>
  </entry>
  
</feed>
